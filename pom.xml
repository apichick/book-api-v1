<?xml version="1.0" encoding="UTF-8"?>
<project 
	xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>apigee</groupId>
	<artifactId>book-api-v1</artifactId>
	<version>-</version>
	<name>book-api${deployment.suffix}-v1</name>
	<packaging>pom</packaging>
	<pluginRepositories>
		<pluginRepository>
			<id>central</id>
			<name>Maven Plugin Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<updatePolicy>never</updatePolicy>
			</releases>
		</pluginRepository>
	</pluginRepositories>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<org.slf4j.simpleLogger.defaultLogLevel>info</org.slf4j.simpleLogger.defaultLogLevel>
		<project.root.dir>${basedir}</project.root.dir>
		<target.root.dir>${basedir}/target</target.root.dir>
		<apigee.hosturl>https://api.enterprise.apigee.com</apigee.hosturl>
		<apigee.apiversion>v1</apigee.apiversion>
		<apigee.username>${username}</apigee.username>
		<apigee.password>${password}</apigee.password>
		<apigee.org>${org}</apigee.org>
		<apigee.env>${env}</apigee.env>
		<apigee.config.dir>${target.root.dir}/config</apigee.config.dir>
		<apigee.options>update</apigee.options>
		<apigee.config.options>update</apigee.config.options>
		<apigee.config.exportDir>${project.root.dir}</apigee.config.exportDir>
		<description>${name}${description.suffix}</description>
		<deployment.suffix>-${user.name}</deployment.suffix>
		<entity.suffix>${deployment.suffix}</entity.suffix>
		<skipNode>true</skipNode>
		<test.scheme>https</test.scheme>
		<test.domain>${apigee.org}-${apigee.env}.apigee.net/book${deployment.suffix}/v1</test.domain>
	</properties>
	<profiles>
		<profile>
			<id>skip-node</id>
			<properties>
				<name>skipNode</name>
				<value>false</value>
			</properties>
			<activation>
				<file>
					<exists>apiproxy/resources/node</exists>
				</file>
			</activation>
		</profile>
	</profiles>
	<build>
		<plugins>
			<plugin>
				<groupId>com.cj.jshintmojo</groupId>
				<artifactId>jshint-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<id>validate-proxy-sources</id>
						<phase>process-sources</phase>
						<goals>
							<goal>lint</goal>
						</goals>
						<configuration>
							<directories>
								<directory>apiproxy/resources/jsc</directory>
							</directories>
							<reporter>jslint</reporter>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<overwrite>true</overwrite>
							<outputDirectory>${target.root.dir}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.root.dir}</directory>
									<includes>
										<include>apiproxy/**</include>
										<include>config/**</include>										
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.apigee.edge.config</groupId>
				<artifactId>apigee-config-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<id>create-config-cache</id>
						<phase>package</phase>                        
						<goals>
							<goal>caches</goal>
						</goals>
					</execution>
					<execution>
						<id>create-config-kvm</id>
						<phase>package</phase>                        
						<goals>
							<goal>kvms</goal>
						</goals>
					</execution>
					<execution>
						<id>create-config-targetserver</id>
						<phase>package</phase>                        
						<goals>
							<goal>targetservers</goal>
						</goals>
					</execution>
					<execution>
						<id>create-config-apiproduct</id>
						<phase>verify</phase>                        
						<goals>
							<goal>apiproducts</goal>
						</goals>
					</execution>
					<execution>
						<id>create-config-developer</id>
						<phase>verify</phase>                        
						<goals>
							<goal>developers</goal>
						</goals>
					</execution>
					<execution>
						<id>create-config-app</id>
						<phase>install</phase>                        
						<goals>
							<goal>apps</goal>
						</goals>
					</execution>
					<execution>
						<id>export-app-keys</id>
						<phase>install</phase>                        
						<goals>
							<goal>exportAppKeys</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
   				<groupId>org.codehaus.gmavenplus</groupId>
    			<artifactId>gmavenplus-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>update-apigee-config-options</id>
						<phase>verify</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scripts>
            					<script>
								<![CDATA[
									project.properties.setProperty('apigee.config.options', 'sync')
								]]>
            					</script>
          					</scripts>
						</configuration>
					</execution>
					<execution>
						<id>read-developer-app-credentials</id>
						<phase>install</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scripts>
            					<script>
								<![CDATA[
									def orgConfigDir = new File(project.properties.getProperty('apigee.config.dir'), 'org')
									def exportDir = new File(project.properties.getProperty('apigee.config.exportDir'))
									def developersFile = new File(orgConfigDir, 'developers.json')
									def appsFile = new File(orgConfigDir, 'developerApps.json')
									def keysFile = new File(exportDir, 'devAppKeys.json')
									def jsonSlurper = new groovy.json.JsonSlurper() 
									def developers = jsonSlurper.parseText(developersFile.text)
									def apps = jsonSlurper.parseText(appsFile.text)
									def keys = jsonSlurper.parseText(keysFile.text)
									def developerEmail = developers[0].email
									def appName = apps[developerEmail][0].name
									def appDetails = keys.find { it.name == appName }
									project.properties.setProperty('test.consumerKey', appDetails.credentials[0].consumerKey)
									project.properties.setProperty('test.consumerSecret', appDetails.credentials[0].consumerSecret)
								]]>
            					</script>
          					</scripts>
						</configuration>
					</execution>
					<execution>
						<id>set-test-world-parameters</id>
						<phase>install</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scripts>
            					<script>
								<![CDATA[
									def worldParameters = [:]
									project.properties.each { 
										if(it.key.startsWith('test.')) {
											worldParameters[it.key.replace('test.', '')] = it.value
										}
									}
									project.properties.setProperty('worldParameters', new groovy.json.JsonBuilder(worldParameters).toString());
								]]>
            					</script>
          					</scripts>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy-all</artifactId>
					<version>2.4.12</version>
					<scope>runtime</scope>
					</dependency>
  				</dependencies>
			</plugin>   
			<plugin>
				<groupId>io.apigee.build-tools.enterprise4g</groupId>
				<artifactId>apigee-edge-maven-plugin</artifactId>
				<version>1.1.6</version>
				<executions>
					<execution>
						<id>config-json</id>
						<phase>package</phase>
						<goals>
							<goal>configure</goal>
						</goals>
					</execution>
					<execution>
						<id>deploy-api-proxy</id>
						<phase>package</phase>
						<goals>
							<goal>deploy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<id>install-unit-tests-node-packages</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<executable>npm</executable>
							<workingDirectory>test/unit</workingDirectory>
							<commandlineArgs>install</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>run-unit-tests</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<executable>node</executable>
							<workingDirectory>test/unit</workingDirectory>
							<commandlineArgs>./node_modules/jest/bin/jest --notify --config=config.json</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>install-node-app-node-packages</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<executable>npm</executable>
							<workingDirectory>apiproxy/resources/node</workingDirectory>
							<commandlineArgs>install</commandlineArgs>
							<skip>${skipNode}</skip>
						</configuration>
					</execution>
					<execution>
						<id>install-integration-tests-node-packages</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<executable>npm</executable>
							<workingDirectory>test/integration</workingDirectory>
							<commandlineArgs>install</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>run-integration-tests</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<executable>node</executable>
							<workingDirectory>test/integration</workingDirectory>
							<commandlineArgs>./node_modules/cucumber/bin/cucumber-js --world-parameters '${worldParameters}' --format ./node_modules/cucumber-pretty -f json:report.json</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>auto-clean-init</id>
						<phase>initialize</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
					<execution>
						<id>auto-clean-install</id>
						<phase>install</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
